name: Rails CI/CD Pipeline with Kamal

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: rails_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: rails_test_pg
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Ruby 3.4.1
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4.1
        bundler-cache: true
    
    - name: Install dependencies
      run: |
        gem install bundler
        bundle install --jobs 4 --retry 3
    
    - name: Setup MySQL database
      run: |
        bundle exec rake db:create RAILS_ENV=test
        bundle exec rake db:schema:load RAILS_ENV=test
      env:
        DATABASE_URL: mysql2://root:password@127.0.0.1:3306/rails_test
    
    - name: Run tests with MySQL
      run: bundle exec rspec
      env:
        DATABASE_URL: mysql2://root:password@127.0.0.1:3306/rails_test
        RAILS_ENV: test
    
    - name: Setup PostgreSQL database
      run: |
        bundle exec rake db:create RAILS_ENV=production_test
        bundle exec rake db:schema:load RAILS_ENV=production_test
      env:
        DATABASE_URL: postgres://postgres:password@127.0.0.1:5432/rails_test_pg
        RAILS_ENV: production_test
    
    - name: Run tests with PostgreSQL
      run: bundle exec rspec
      env:
        DATABASE_URL: postgres://postgres:password@127.0.0.1:5432/rails_test_pg
        RAILS_ENV: production_test
    
    - name: Run security checks
      run: |
        gem install brakeman
        brakeman -z
    
    - name: Run linting
      run: bundle exec rubocop

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Ruby 3.4.1
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4.1
    
    - name: Install Kamal
      run: gem install kamal
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }},${{ secrets.DOCKER_USERNAME }}/myapp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -t rsa ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy with Kamal
      run: |
        export KAMAL_REGISTRY_PASSWORD=${{ secrets.DOCKER_PASSWORD }}
        export KAMAL_REGISTRY_USERNAME=${{ secrets.DOCKER_USERNAME }}
        export KAMAL_HOSTS=${{ secrets.DEPLOY_HOST }}
        export KAMAL_SSH_USER=${{ secrets.SSH_USER }}
        export KAMAL_REGISTRY_SERVER=docker.io
        export KAMAL_IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/myapp
        export KAMAL_VERSION=${{ github.sha }}
        
        # Run Kamal deployment
        kamal setup
        kamal deploy
      env:
        RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

  gem-publish:
    name: Publish Gem
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Ruby 3.4.1
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.4.1
    
    - name: Publish to GPR
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:github: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push --KEY github --host https://rubygems.pkg.github.com/${OWNER} *.gem
      env:
        GEM_HOST_API_KEY: "Bearer ${{secrets.GITHUB_TOKEN}}"
        OWNER: ${{ github.repository_owner }}
    
    - name: Publish to RubyGems
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push *.gem
      env:
        GEM_HOST_API_KEY: "${{secrets.RUBYGEMS_AUTH_TOKEN}}"
